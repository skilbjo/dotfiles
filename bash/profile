#!/usr/bin/env bash
set -uo pipefail

# -- docs -------------------------------------------------------
# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login exists.
# see /usr/share/doc/bash/examples/startup-files for examples.

if [ -f ~/.bashrc ]; then
  source ~/.bashrc
fi

# -- path, command prompt ---------------------------------------
export PATH='/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:~/bin'
export PATH="/usr/local/opt/ruby/bin:$PATH" # ruby-only

# -- helpful functions ------------------------------------------
source_if_exists() {
  set +u
  [[ -f $1 ]] && source "$1"
  set -u
}

set -u

# -- environment vars & dotfiles --------------------------------
export EDITOR='vim'
export LESS='-R -i-P%f (%i/%m) Line %lt/%L'

source_if_exists "$HOME/.aliases"       # Aliases

# -- Bash bindings / settings ----------------------------------
bind 'set show-all-if-ambiguous on'
bind 'TAB:menu-complete'
bind 'set completion-ignore-case on'
bind 'set visible-stats on'
bind 'set page-completions off'

# -- OS  settings -----------------------------------------------
all_os() {
  source_if_exists "$HOME/.profilelocal"  # env variables
}

osx() {
  # -- fns ------------------------------------------------------
  # start_docker

  # -- alias ----------------------------------------------------
  ## - docker --------
  set +u
  alias "docker.rm.this"="function _(){ docker images | grep \"$1\" | awk '{print \$3}' | grep -v IMAGE | xargs docker rmi; };_"
  set -u

  ## - node ----------
  export NODE_OPTIONS='--max-old-space-size=10240 --experimental-repl-await'

  ## - unix / macos --
  alias nproc='sysctl -n hw.logicalcpu'

  # -- env vars -------------------------------------------------
  export EVENT_NOKQUEUE='1'                 # tmux kqueue error
  export WORKON_HOME="$HOME/.virtualenvs"
  export PROJECT_HOME="$HOME/dev"
  export VIRTUALENVWRAPPER_PYTHON='/usr/local/bin/python3'
  export VIRTUALENVWRAPPER_VIRTUALENV='/usr/local/bin/virtualenv'
  export PYTHONIOENCODING='UTF-8'
  export NVM_DIR="$HOME/.nvm"
  export DOTNET_CLI_TELEMETRY_OPTOUT=true
  export GPG_TTY="$(tty)"       # https://stackoverflow.com/questions/39494631/gpg-failed-to-sign-the-data-fatal-failed-to-write-commit-object-git-2-10-0

  # -- java -----------------------------------------------------
  # export JAVA_HOME="$(/usr/libexec/java_home -v 21)" # Java 21

  # -- use ctrl + <Left> / <Right> ----------------------------
  bind '"\e[5C": forward-word'
  bind '"\e[5D": backward-word'
  bind '"\e[1;5C": forward-word'
  bind '"\e[1;5D": backward-word'

  # -- bash completion ----------------------------------------
  set +u
  if [ -f $(brew --prefix)/etc/bash_completion ]; then
    source "$(brew --prefix)/etc/bash_completion"   # bash-completion
  fi
  set -u

  # -- addtl completion python virtualenvwrapper+node nvm -----
  set +u
  source_if_exists "$(brew --prefix)/bin/virtualenvwrapper.sh"
  source_if_exists "$(brew --prefix nvm)/nvm.sh"
  # source_if_exists "$(brew --prefix)/opt/nvm/nvm.sh"
  source_if_exists "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm"
  set -u

  if [ -d "/opt/homebrew/opt/ruby/bin" ]; then
    export PATH="/opt/homebrew/opt/ruby/bin:${PATH}"
    export PATH="$(gem environment gemdir)"/bin:$PATH
  fi

  # -- custom functions ---------------------------------------
  if [[ -f ~/.fns ]]; then
    source ~/.fns
  fi
}

linux() {
  # -- linux-specific aliases ---------------------------------
  #alias pbcopy='xsel --clipboard --input'     ## Xsel and Xclip don't work in virtual terminal
  #alias pbpaste='xsel --clipboard --output'
  alias ll='ls -la'

  export GPG_TTY="$(tty)"       # https://stackoverflow.com/questions/39494631/gpg-failed-to-sign-the-data-fatal-failed-to-write-commit-object-git-2-10-0
  # -- virtual terminal (box connected to monitor) ------------
  #if [ "$TERM" = "linux" ]; then
    #echo -en "\e]P0222222" #black
    #echo -en "\e]P8222222" #darkgrey
    #echo -en "\e]P1803232" #darkred
    #echo -en "\e]P9982b2b" #red
    #echo -en "\e]P25b762f" #darkgreen
    #echo -en "\e]PA89b83f" #green
    #echo -en "\e]P3aa9943" #brown
    #echo -en "\e]PBefef60" #yellow
    #echo -en "\e]P4324c80" #darkblue
    #echo -en "\e]PC2b4f98" #blue
    #echo -en "\e]P5706c9a" #darkmagenta
    #echo -en "\e]PD826ab1" #magenta
    #echo -en "\e]P692b19e" #darkcyan
    #echo -en "\e]PEa1cdcd" #cyan
    #echo -en "\e]P7ffffff" #lightgrey
    #echo -en "\e]PFdedede" #white
    #clear #for background artifacting
  #fi
}

freebsd() {
  # -- original .profile ----------------------------------------
  # These are normally set through /etc/login.conf.  You may override them here
  # if wanted.
  # PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:$HOME/bin; export PATH
  # BLOCKSIZE=K;  export BLOCKSIZE

  # Setting TERM is normally done through /etc/ttys.  Do only override
  # if you're sure that you'll never log in via telnet or xterm or a
  # serial line.
  # TERM=xterm;   export TERM
  EDITOR=vi;      export EDITOR
  #PAGER=more;     export PAGER

  # set ENV to a file invoked each time sh is started for interactive use.
  #ENV=$HOME/.shrc; export ENV

  if [ -x /usr/bin/fortune ] ; then /usr/bin/fortune freebsd-tips ; fi

  # -- fns ------------------------------------------------------
  #export PATH="${PATH}:/~./local/bin"  # not needed, just pip install awscli --user; cd ~/bin/; ln -s /home/skilbjo/.local/bin/aws aws

  # -- fns ------------------------------------------------------
  start_docker  # turn off until virtualbox is resolved

  # -- bash completion ----------------------------------------
  set +u
  [[ $PS1 && -f /usr/local/share/bash-completion/bash_completion.sh ]] && \
    source /usr/local/share/bash-completion/bash_completion.sh
  set -u

  # -- env vars -------------------------------------------------
  export EVENT_NOKQUEUE='1'                 # tmux kqueue error
  export WORKON_HOME="$HOME/.virtualenvs"
  export PROJECT_HOME="$HOME/dev"
  export VIRTUALENVWRAPPER_PYTHON='/usr/local/bin/python3'
  export VIRTUALENVWRAPPER_VIRTUALENV='/home/skilbjo/.local/bin/virtualenv'
  export PYTHONIOENCODING='UTF-8'

  # -- virtualenvwrapper --------------------------------------
  set +u
  source_if_exists ~/.local/bin/virtualenvwrapper.sh
  set -u

  #https://superuser.com/questions/715125/openssh-freebsd-screen-overwrite-when-closing-application
  export TERM='xterm-color'
}

os_specific() {
  all_os

  case "$(uname)" in
    ('Darwin')
      if [[ $(uname -m) == 'arm64' ]]; then
        export PATH="/opt/homebrew/bin:${PATH}";
        export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
        export PUPPETEER_EXECUTABLE_PATH="$(which chromium)"
      fi;
        export SHELL="$(brew --prefix)/bin/bash"

      osx ;;
    ('Linux')   linux ;;
    ('FreeBSD') freebsd ;;
  esac
}
os_specific

# -- computer-specific stuffs -----------------------------------
skilbjo() {
  # Add password-protected id_rsa key
  if [[ "Darwin" == $(uname) ]]; then
    if [[ $(ps aux | grep ssh-agent | wc -l) -lt 1 ]]; then
      ## Add regular private key
      eval "$(ssh-agent -s)" && \
        ssh-add -K ~/.ssh/id_rsa 2>/dev/null || \
        ssh-add ~/.ssh/id_rsa
    else
      ssh-add -K ~/.ssh/id_rsa 2>/dev/null || ssh-add ~/.ssh/id_rsa
    fi

    case "$(hostname)" in
      mbp | mbp2 | mbp2.lan )
        ssh-add -K ~/.ssh/id_rsa_stedi 2>/dev/null ;; ## Add cirlceci private key
    esac
  fi
}

work() {
  skilbjo

  case "$(uname -m)" in
    arm64 )
      export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:${PATH}"
      export PATH="/opt/homebrew/opt/libpq/bin:$PATH" # for `brew install libpq` only; without installing local postgres server. only on work laptop
      ssh-add -K ~/.ssh/id_ed25519 2>/dev/null || ssh-add ~/.ssh/id_ed25519
      ;;

    x86_64 )
      export PATH="/usr/local/bin:${PATH}"
      export GOPATH="$HOME/go"
    esac

  export TZ='UTC'
}

_aws() {
  return
}

computer_specific() {
  case "$(whoami)" in
    johnskilbeck ) work ;;
    skilbjo )      skilbjo ;;
    pi )           pi ;;
    ec2-user )     _aws ;;
  esac
}

computer_specific
set +u
