#!/usr/bin/env bash
set -u

# -- general ----------------------------------------------------
kmsd(){
  # https://stackoverflow.com/a/53735748/2490091
  aws kms decrypt \
    --profile skilbjo-long-term \
    --ciphertext-blob fileb://<( \
      cat /dev/stdin | \
      sed 's/.*kmscrypt:://' | \
      tr -d '\n' | \
      base64 -D
    ) \
    --output text \
    --key-id "$aws_kms_key" \
    --region us-east-1 \
    --query Plaintext | \
  base64 -D
}

kmse(){
  # https://stackoverflow.com/a/53735748/2490091
  aws kms encrypt \
    --profile skilbjo-long-term \
    --key-id "$aws_kms_key" \
    --plaintext "$(cat /dev/stdin)" \
    --region us-east-1 \
    --query CiphertextBlob \
    --output text
}

git() {
  if [[ $@ == 'push -f'* ]] || [[ $@ == 'pu -f'* ]]; then
    echo 'use --force-with-lease instead'
  else
    command git "$@"
  fi
}

# -- stedi ------------------------------------------------------
logs(){
  local log_group_name="$1"
  local log_stream_name="$2"

  log_group_name='/aws/lambda/platform-txn-CounselorSer-ServiceSqsHandleTransact-QRF9BTCXUTXZ'
  log_stream_name='2020/07/02/[$LATEST]7ffab4e9f53e4a8f992d3edcaf9aef3f'

  aws --profile stedi/dev --region us-east-1 \
    logs \
    get-log-events \
    --log-group-name "$log_group_name" \
    --log-stream-name "$log_stream_name"
}

query_logs(){
  local date="$1"
  local start="$(gdate --date "$date - 2 minute" +%s)"
  local end="$(gdate --date "$date + 2 minute" +%s)"
    #--start-time "$start" \
    #--end-time "$end" \
  local log_group_name='/aws/lambda/platform-txn-CounselorSer-ServiceSqsHandleTransact-QRF9BTCXUTXZ'
  local query='fields @message like /error/'
  local query='fields @timestamp, @message | sort @timestamp desc | limit 20'

  log_group_name='/aws/lambda/platform-txn-CounselorSer-ServiceSqsHandleTransact-QRF9BTCXUTXZ'
  query='fields @timestamp, @message | sort @timestamp desc | limit 20'
  query_id="$(aws --profile stedi/principal --region us-east-1 \
    logs \
    start-query \
    --start-time 1593736067 \
    --end-time 1593736313 \
    --log-group-name "$log_group_name" \
    --query-string "$query" | jq '.queryId')"

  aws --profile stedi/principal --region us-east-1 \
    logs \
    get-query-results \
    --query-id "$query_id"
}

assume-role(){
  local acct="$1"
  local role_name="$2"
  local duration=${3:-3600}

  aws-mfa --duration "$duration" --profile "$acct" --assume-role "$("${EISH_HOME}/si-role-arn" -n "$acct" -r "$role_name")"
}

assume-aws-dev(){
  assume-role stedi/dev wheel 43200
}

assume-aws-build(){
  assume-role stedi/build ro 14400
}

assume-aws-build-wheel(){
  assume-role stedi/build wheel 3600
}

assume-aws-prod(){
  assume-role stedi/principal ro 14400
}

assume-aws-prod-wheel(){
  assume-role stedi/principal wheel 3600
}

deploy-to-dev(){
  AWS_DISCRIMINANT_QUALIFIER=john npx cdk deploy --profile stedi/dev john-CounselorServiceInteg
}

## google cloud
gcp-psql(){
  psql "sslmode=verify-ca sslrootcert=/Users/skilbjo/Downloads/server-ca.pem \
      sslcert=/Users/skilbjo/client-cert.pem sslkey=/Users/skilbjo/Downloads/client-key.pem \
      hostaddr=35.193.230.82 \
      port=5432 \
      user=postgres dbname=postgres"
}

sso(){
  unset AWS_PROFILE
  export AWS_PROFILE=$1
  aws sts get-caller-identity &> /dev/null || aws sso login || (unset AWS_PROFILE && aws-configure-sso-profile --profile $1)
  eval $(aws-export-credentials --env-export)
}


# -- fnch -------------------------------------------------------
uri-encode() {
  # uri-encode <string>
  old_lc_collate=$LC_COLLATE
  LC_COLLATE=C

  local length="${#1}"
  for (( i = 0; i < length; i++ )); do
    local c="${1:$i:1}"
    case $c in
      [a-zA-Z0-9.~_-])
        printf '%s' "$c" ;;
      *)
        printf '%%%02X' "'$c" ;;
    esac
  done
  echo ''

  LC_COLLATE=$old_lc_collate
}

uri-decode() {
  # uri-decode <string>
  local url_encoded="${1//+/ }"
  printf '%b' "${url_encoded//%/\\x}"
  echo ''
}
